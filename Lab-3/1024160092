#include <iostream>
using namespace std;

#define MAX 5  

class Stack {
    int arr[MAX];
    int top;

public:
    Stack() {
        top = -1;
    }

    
    bool isEmpty() {
        return (top == -1);
    }

    // Check if stack is full
    bool isFull() {
        return (top == MAX - 1);
    }

    // Push element into stack
    void push(int x) {
        if (isFull()) {
            cout << "Stack Overflow! Cannot push " << x << endl;
        } else {
            arr[++top] = x;
            cout << x << " pushed into stack." << endl;
        }
    }

    // Pop element from stack
    void pop() {
        if (isEmpty()) {
            cout << "Stack Underflow! Cannot pop." << endl;
        } else {
            cout << arr[top--] << " popped from stack." << endl;
        }
    }

    // Peek top element
    void peek() {
        if (isEmpty()) {
            cout << "Stack is Empty!" << endl;
        } else {
            cout << "Top element is: " << arr[top] << endl;
        }
    }

    // Display all elements
    void display() {
        if (isEmpty()) {
            cout << "Stack is Empty!" << endl;
        } else {
            cout << "Stack elements: ";
            for (int i = top; i >= 0; i--) {
                cout << arr[i] << " ";
            }
            cout << endl;
        }
    }
};

int main() {
    Stack s;
    int choice, value;

    do {
        cout << "\n--- Stack Menu ---" << endl;
        cout << "1. Push" << endl;
        cout << "2. Pop" << endl;
        cout << "3. isEmpty" << endl;
        cout << "4. isFull" << endl;
        cout << "5. Display" << endl;
        cout << "6. Peek" << endl;
        cout << "0. Exit" << endl;
        cout << "Enter your choice: ";
        cin >> choice;

        switch (choice) {
        case 1:
            cout << "Enter value to push: ";
            cin >> value;
            s.push(value);
            break;

        case 2:
            s.pop();
            break;

        case 3:
            if (s.isEmpty())
                cout << "Stack is Empty." << endl;
            else
                cout << "Stack is NOT Empty." << endl;
            break;

        case 4:
            if (s.isFull())
                cout << "Stack is Full." << endl;
            else
                cout << "Stack is NOT Full." << endl;
            break;

        case 5:
            s.display();
            break;

        case 6:
            s.peek();
            break;

        case 0:
            cout << "Exiting..." << endl;
            break;

        default:
            cout << "Invalid choice! Try again." << endl;
        }

    } while (choice != 0);

    return 0;
}


#include <iostream>
#include <stack>
using namespace std;

string reverseString(string str) {
    stack<char> s;

    // Push all characters onto stack
    for (char c : str) {
        s.push(c);
    }

    // Pop characters and build reversed string
    string reversed = "";
    while (!s.empty()) {
        reversed += s.top();
        s.pop();
    }

    return reversed;
}

int main() {
    string input;
    cout << "Enter a string: ";
    cin >> input;  // reads a single word (no spaces)

    cout << "Reversed string: " << reverseString(input) << endl;

    return 0;
}

#include <iostream>
#include <stack>
using namespace std;

bool isBalanced(string expr) {
    stack<char> s;

    for (char c : expr) {
        // If opening bracket, push to stack
        if (c == '(' || c == '{' || c == '[') {
            s.push(c);
        }
        // If closing bracket, check match
        else if (c == ')' || c == '}' || c == ']') {
            if (s.empty()) return false; // No matching opening

            char top = s.top();
            s.pop();

            if ((c == ')' && top != '(') ||
                (c == '}' && top != '{') ||
                (c == ']' && top != '[')) {
                return false; // mismatch
            }
        }
    }

    return s.empty(); // true if all matched
}

int main() {
    string expr;
    cout << "Enter expression: ";
    cin >> expr;   // if you want spaces, use getline()

    if (isBalanced(expr))
        cout << "Expression is Balanced." << endl;
    else
        cout << "Expression is NOT Balanced." << endl;

    return 0;
}

#include <iostream>
#include <stack>
#include <cctype>  // for isalnum
using namespace std;

// Function to return precedence of operators
int precedence(char op) {
    if (op == '^') return 3;
    if (op == '*' || op == '/') return 2;
    if (op == '+' || op == '-') return 1;
    return -1;
}

// Function to convert Infix to Postfix
string infixToPostfix(string infix) {
    stack<char> st;
    string postfix = "";

    for (char c : infix) {
        // If operand, add to result
        if (isalnum(c)) {
            postfix += c;
        }
        // If '(', push to stack
        else if (c == '(') {
            st.push(c);
        }
        // If ')', pop until '('
        else if (c == ')') {
            while (!st.empty() && st.top() != '(') {
                postfix += st.top();
                st.pop();
            }
            if (!st.empty() && st.top() == '(') st.pop(); // pop '('
        }
        // If operator
        else {
            while (!st.empty() && precedence(st.top()) >= precedence(c)) {
                // Special case: ^ is right-associative
                if (c == '^' && precedence(st.top()) == precedence(c))
                    break;
                postfix += st.top();
                st.pop();
            }
            st.push(c);
        }
    }

    // Pop remaining operators
    while (!st.empty()) {
        postfix += st.top();
        st.pop();
    }

    return postfix;
}

int main() {
    string infix;
    cout << "Enter Infix expression: ";
    cin >> infix;   // use getline(cin, infix) if you want spaces

    string postfix = infixToPostfix(infix);
    cout << "Postfix expression: " << postfix << endl;

    return 0;
}

#include <iostream>
#include <stack>
#include <cctype>   // for isdigit
#include <sstream>  // for stringstream
using namespace std;

int evaluatePostfix(string expr) {
    stack<int> s;

    for (int i = 0; i < expr.length(); i++) {
        char c = expr[i];

        // Ignore spaces
        if (c == ' ') continue;

        // If operand (number)
        if (isdigit(c)) {
            s.push(c - '0');  // Convert char digit to int
        }
        // Operator
        else {
            int val2 = s.top(); s.pop();
            int val1 = s.top(); s.pop();

            switch (c) {
                case '+': s.push(val1 + val2); break;
                case '-': s.push(val1 - val2); break;
                case '*': s.push(val1 * val2); break;
                case '/': s.push(val1 / val2); break;
            }
        }
    }
    return s.top();
}

int main() {
    string expr;
    cout << "Enter Postfix Expression (single-digit operands, no spaces): ";
    cin >> expr;

    cout << "Result = " << evaluatePostfix(expr) << endl;
    return 0;
}
