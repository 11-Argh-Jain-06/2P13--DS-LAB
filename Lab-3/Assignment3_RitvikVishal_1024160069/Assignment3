//Q1

#include <iostream>
using namespace std;

#define SIZE 5  
int stack[SIZE], top = -1;


void push(int value) {
    if (top == SIZE - 1) {
        cout << "Stack Overflow!" << endl;
    } else {
        stack[++top] = value;
        cout << value << " pushed into stack." << endl;
    }
}


void pop() {
    if (top == -1) {
        cout << "Stack Underflow!" << endl;
    } else {
        cout << stack[top--] << " popped from stack." << endl;
    }
}


void peek() {
    if (top == -1) {
        cout << "Stack is empty!" << endl;
    } else {
        cout << "Top element is: " << stack[top] << endl;
    }
}


void isEmpty() {
    if (top == -1)
        cout << "Stack is Empty" << endl;
    else
        cout << "Stack is NOT Empty" << endl;
}


void isFull() {
    if (top == SIZE - 1)
        cout << "Stack is Full" << endl;
    else
        cout << "Stack is NOT Full" << endl;
}


void display() {
    if (top == -1) {
        cout << "Stack is empty!" << endl;
    } else {
        cout << "Stack elements: ";
        for (int i = top; i >= 0; i--) {
            cout << stack[i] << " ";
        }
        cout << endl;
    }
}

int main() {
    int choice, value;
    while (true) {
        cout << "\n--- Stack Menu ---\n";
        cout << "1. Push\n2. Pop\n3. Peek\n4. isEmpty\n5. isFull\n6. Display\n7. Exit\n";
        cout << "Enter choice: ";
        cin >> choice;

        switch (choice) {
        case 1:
            cout << "Enter value to push: ";
            cin >> value;
            push(value);
            break;
        case 2:
            pop();
            break;
        case 3:
            peek();
            break;
        case 4:
            isEmpty();
            break;
        case 5:
            isFull();
            break;
        case 6:
            display();
            break;
        case 7:
            exit(0);
        default:
            cout << "Invalid choice!" << endl;
        }
    }
}



//Q2

#include <iostream>
#include <stack>
using namespace std;

string reverseString(string str) {
    stack<char> s;

  
    for (int i = 0; i < str.length(); i++) {
        s.push(str[i]);
    }

    string reversed = "";
    while (!s.empty()) {
        reversed += s.top();
        s.pop();
    }

    return reversed;
}

int main() {
    string input;
    cout << "Enter a string: ";
    getline(cin, input);

    cout << "Reversed string: " << reverseString(input) << endl;
    return 0;
}




//Q3

#include <iostream>
#include <stack>
using namespace std;

bool isBalanced(string expr) {
    stack<char> s;

    for (int i = 0; i < expr.length(); i++) {
        char c = expr[i];

        
        if (c == '(' || c == '{' || c == '[') {
            s.push(c);
        }
        
        else if (c == ')' || c == '}' || c == ']') {
            if (s.empty()) return false; 

            char top = s.top();
            s.pop();

      
            if ((c == ')' && top != '(') ||
                (c == '}' && top != '{') ||
                (c == ']' && top != '[')) {
                return false;
            }
        }
    }

 
    return s.empty();
}

int main() {
    string expr;
    cout << "Enter expression: ";
    getline(cin, expr);

    if (isBalanced(expr))
        cout << "Expression is Balanced" << endl;
    else
        cout << "Expression is NOT Balanced" << endl;

    return 0;
}


//Q4
#include <iostream>
#include <stack>
#include <cctype> 
using namespace std;


int precedence(char op) {
    if (op == '^') return 3;
    if (op == '*' || op == '/') return 2;
    if (op == '+' || op == '-') return 1;
    return 0;
}


string infixToPostfix(string infix) {
    stack<char> s;
    string postfix = "";

    for (int i = 0; i < infix.length(); i++) {
        char c = infix[i];

        
        if (isalnum(c)) {
            postfix += c;
        }
        
        else if (c == '(') {
            s.push(c);
        }
       
        else if (c == ')') {
            while (!s.empty() && s.top() != '(') {
                postfix += s.top();
                s.pop();
            }
            if (!s.empty()) s.pop(); 
        }
        
        else {
            while (!s.empty() && precedence(s.top()) >= precedence(c)) {
                postfix += s.top();
                s.pop();
            }
            s.push(c);
        }
    }

    
    while (!s.empty()) {
        postfix += s.top();
        s.pop();
    }

    return postfix;
}

int main() {
    string infix;
    cout << "Enter an infix expression: ";
    getline(cin, infix);

    string postfix = infixToPostfix(infix);
    cout << "Postfix expression: " << postfix << endl;

    return 0;
}


//Q5

#include <iostream>
#include <stack>
#include <cctype>  
#include<cmath>
using namespace std;

int evaluatePostfix(string postfix) {
    stack<int> s;

    for (int i = 0; i < postfix.length(); i++) {
        char c = postfix[i];

        
        if (isdigit(c)) {
            s.push(c - '0'); 
        }
        
        else {
            int val2 = s.top(); s.pop();
            int val1 = s.top(); s.pop();

            switch (c) {
                case '+': s.push(val1 + val2); break;
                case '-': s.push(val1 - val2); break;
                case '*': s.push(val1 * val2); break;
                case '/': s.push(val1 / val2); break;
                case '^': s.push(pow(val1, val2)); break;
            }
        }
    }
    return s.top();
}

int main() {
    string postfix;
    cout << "Enter postfix expression: ";
    cin >> postfix;

    cout << "Result: " << evaluatePostfix(postfix) << endl;

    return 0;
}
