#include <iostream>
using namespace std;


int binarySearch(int arr[], int n, int target) {
    int left = 0, right = n - 1;

    while (left <= right) {
        int mid = left + (right - left) / 2;

        if (arr[mid] == target)
            return mid;
        else if (arr[mid] < target)
            left = mid + 1; 
        else
            right = mid - 1;
    }

    return -1;
}

int main() {
    int arr[] = {2, 4, 7, 10, 13, 18, 21, 25, 30};
    int n = sizeof(arr) / sizeof(arr[0]);
    int target = 18;

    int result = binarySearch(arr, n, target);

    if (result != -1)
        cout << "Element " << target << " found at index " << result << endl;
    else
        cout << "Element " << target << " not found" << endl;

    return 0;
}

#include <iostream>
using namespace std;

void bubbleSort(int arr[], int n) {
    for (int i = 0; i < n - 1; i++) {
        bool swapped = false;  // optimization: check if already sorted
        for (int j = 0; j < n - i - 1; j++) {
            if (arr[j] > arr[j + 1]) {
                // Swap adjacent elements
                int temp = arr[j];
                arr[j] = arr[j + 1];
                arr[j + 1] = temp;
                swapped = true;
            }
        }
        
        if (!swapped) break;
    }
}

void printArray(int arr[], int n) {
    for (int i = 0; i < n; i++)
        cout << arr[i] << " ";
    cout << endl;
}

int main() {
    int arr[] = {64, 34, 25, 12, 22, 11, 90};
    int n = sizeof(arr) / sizeof(arr[0]);

    cout << "Original array: ";
    printArray(arr, n);

    bubbleSort(arr, n);

    cout << "Sorted array: ";
    printArray(arr, n);

    return 0;
}
#include <iostream>
using namespace std;

int findMissingLinear(int arr[], int n) {
    for (int i = 0; i < n - 1; i++) {
        if (arr[i] != i + 1) {
            return i + 1;  // mismatch found
        }
    }
    return n; // If no mismatch, missing number is n
}

int main() {
    int arr[] = {1, 2, 3, 5, 6, 7};  // n = 7, missing = 4
    int n = 7;

    cout << "Missing number (Linear): " << findMissingLinear(arr, n) << endl;

    return 0;
}
4a
#include <iostream>
#include <cstring>
using namespace std;

int main() {
    char str1[100] = "Hello ";
    char str2[50] = "World!";

    strcat(str1, str2);

    cout << "Concatenated String: " << str1 << endl;
    return 0;
}
4b
#include <iostream>
#include <cstring>
using namespace std;

int main() {
    char str[100] = "Open";
    int n = strlen(str);

    for (int i = 0; i < n / 2; i++) {
        char temp = str[i];
        str[i] = str[n - i - 1];
        str[n - i - 1] = temp;
    }

    cout << "Reversed String: " << str << endl;
    return 0;
}

#include <iostream>
#include <cstring>
using namespace std;

bool isVowel(char c) {
    c = tolower(c);
    return (c=='a' || c=='e' || c=='i' || c=='o' || c=='u');
}
4c
int main() {
    char str[100] = "Hello World";
    char result[100];
    int j = 0;

    for (int i = 0; str[i] != '\0'; i++) {
        if (!isVowel(str[i])) {
            result[j++] = str[i];
        }
    }
    result[j] = '\0'; 

    cout << "String after deleting vowels: " << result << endl;
    return 0;
}

 4d
#include <iostream>
#include <cstring>
using namespace std;

int main() {
    int n;
    cout << "Enter number of strings: ";
    cin >> n;
    cin.ignore();

    char arr[20][50]; 
    cout << "Enter " << n << " strings:\n";
    for (int i = 0; i < n; i++) {
        cin.getline(arr[i], 50);
    }

    for (int i = 0; i < n - 1; i++) {
        for (int j = i + 1; j < n; j++) {
            if (strcmp(arr[i], arr[j]) > 0) {
                char temp[50];
                strcpy(temp, arr[i]);
                strcpy(arr[i], arr[j]);
                strcpy(arr[j], temp);
            }
        }
    }

    cout << "Strings in alphabetical order:\n";
    for (int i = 0; i < n; i++) {
        cout << arr[i] << endl;
    }

    return 0;
}
4e

#include <iostream>
#include <cctype>
using namespace std;

int main() {
    char ch = 'A';

    cout << "Original Character: " << ch << endl;
    cout << "Lowercase Character: " << char(tolower(ch)) << endl;

    return 0;
}

#include <iostream>
using namespace std;

class Diagonal {
    int *arr;
    int n;
public:
    Diagonal(int n) {
        this->n = n;
        arr = new int[n];
    }
    void set(int i, int j, int val) {
        if (i == j) arr[i] = val;
    }
    int get(int i, int j) {
        if (i == j) return arr[i];
        return 0;
    }
    void display() {
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                cout << get(i, j) << " ";
            }
            cout << endl;
        }
    }
};


#include <iostream>
using namespace std;

int countInversionsBrute(int arr[], int n) {
    int inv_count = 0;
    for (int i = 0; i < n - 1; i++) {
        for (int j = i + 1; j < n; j++) {
            if (arr[i] > arr[j])
                inv_count++;
        }
    }
    return inv_count;
}

int main() {
    int arr[] = {2, 4, 1, 3, 5};
    int n = sizeof(arr) / sizeof(arr[0]);

    cout << "Number of inversions (Brute force): "
         << countInversionsBrute(arr, n) << endl;

    return 0;
}

#include <iostream>
using namespace std;

int mergeAndCount(int arr[], int l, int m, int r) {
    int n1 = m - l + 1;
    int n2 = r - m;

    int left[n1], right[n2];
    for (int i = 0; i < n1; i++) left[i] = arr[l + i];
    for (int j = 0; j < n2; j++) right[j] = arr[m + 1 + j];

    int i = 0, j = 0, k = l;
    int inv_count = 0;

    while (i < n1 && j < n2) {
        if (left[i] <= right[j]) {
            arr[k++] = left[i++];
        } else {
            arr[k++] = right[j++];
            inv_count += (n1 - i); // all remaining left[] are > right[j]
        }
    }

    while (i < n1) arr[k++] = left[i++];
    while (j < n2) arr[k++] = right[j++];

    return inv_count;
}

int mergeSortAndCount(int arr[], int l, int r) {
    int inv_count = 0;
    if (l < r) {
        int m = (l + r) / 2;
        inv_count += mergeSortAndCount(arr, l, m);
        inv_count += mergeSortAndCount(arr, m + 1, r);
        inv_count += mergeAndCount(arr, l, m, r);
    }
    return inv_count;
}

int main() {
    int arr[] = {2, 4, 1, 3, 5};
    int n = sizeof(arr) / sizeof(arr[0]);

    cout << "Number of inversions (Merge Sort): "
         << mergeSortAndCount(arr, 0, n - 1) << endl;

    return 0;
}
