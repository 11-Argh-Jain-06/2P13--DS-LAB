// Ques1:- Implement the Binary search algorithm regarded as a fast search algorithm with run-time complexity of Ο(log n) in comparison to the Linear Search.
#include <iostream>
using namespace std;

int binarySearch(int arr[], int n, int key) {
    int low = 0, high = n - 1;
    while (low <= high) {
        int mid = (low + high) / 2;
        if (arr[mid] == key) return mid;
        else if (arr[mid] < key) low = mid + 1;
        else high = mid - 1;
    }
    return -1;
}

int main() {
    int arr[] = {10, 20, 30, 40, 50, 60};
    int n = sizeof(arr) / sizeof(arr[0]);
    int key = 40;
    int result = binarySearch(arr, n, key);
    if (result != -1) cout << "Element found at index " << result;
    else cout << "Element not found";
    return 0;
}

//Ques2:-
// Bubble Sort is the simplest sorting algorithm that works by repeatedly swapping the adjacent elements if they are in wrong order. Code the Bubble sort with the following elements:
// 64 34 25 12 22 11 90

#include <iostream>
using namespace std;

void bubbleSort(int arr[], int n) {
    for (int i = 0; i < n - 1; i++) {
        for (int j = 0; j < n - i - 1; j++) {
            if (arr[j] > arr[j + 1])
                swap(arr[j], arr[j + 1]);
        }
    }
}

int main() {
    int arr[] = {64, 34, 25, 12, 22, 11, 90};
    int n = sizeof(arr) / sizeof(arr[0]);
    bubbleSort(arr, n);
    cout << "Sorted array: ";
    for (int i = 0; i < n; i++) cout << arr[i] << " ";
    return 0;
}

//Ques3:-
// Design the Logic to Find a Missing Number in a Sorted Array. Given an array of n-1 distinct integers in the range of 1 to n, find the missing number in it in a Sorted Array
// (a) Linear time

#include <iostream>
using namespace std;

int findMissingLinear(int arr[], int n) {
    for (int i = 0; i < n; i++) {
        if (arr[i] != i + 1) return i + 1;
    }
    return -1;
}

int main() {
    int arr[] = {1,2,3,5,6};
    int n = 5;
    cout << "Missing number = " << findMissingLinear(arr, n);
}

// (b) Using binary search

int findMissingBinary(int arr[], int n) {
    int low = 0, high = n - 2; 
    while (low <= high) {
        int mid = (low + high) / 2;
        if (arr[mid] == mid + 1) {
            low = mid + 1; 
        } else {
            high = mid - 1;
        }
    }
    return low + 1; 
}

int main() {
    int arr[] = {1, 2, 3, 5, 6};
    int n = 6;
    cout << "Missing Number (Binary Search): " << findMissingBinary(arr, n) << endl;
    return 0;
}

Ques4:-
// String Related Programs
// (a) Write a program to concatenate one string to another string.
#include <iostream>
#include <cstring>
using namespace std;
int main() {
    char str1[100], str2[100];
    cout << "Enter first string: ";
    cin.getline(str1, 100);
    cout << "Enter second string: ";
    cin.getline(str2, 100);

    strcat(str1, str2); // Concatenate str2 to str1
    cout << "Concatenated string: " << str1 << endl;

    return 0;
}
// (b) Write a program to reverse a string.
#include <iostream>
#include <cstring>                                  
using namespace std;
int main() {
    char str[100];
    cout << "Enter a string: ";
    cin.getline(str, 100);

    int len = strlen(str);
    for (int i = 0; i < len / 2; i++) {
        swap(str[i], str[len - i - 1]); // Swap characters
    }
    cout << "Reversed string: " << str << endl;

    return 0;
}
// (c) Write a program to delete all the vowels from the string.
#include <iostream>
#include <cstring>      
using namespace std;
int main() {
    char str[100];
    cout << "Enter a string: ";
    cin.getline(str, 100);

    char result[100];
    int j = 0;
    for (int i = 0; str[i] != '\0'; i++) {
        if (str[i] != 'a' && str[i] != 'e' && str[i] != 'i' && str[i] != 'o' && str[i] != 'u' &&
            str[i] != 'A' && str[i] != 'E' && str[i] != 'I' && str[i] != 'O' && str[i] != 'U') {
            result[j++] = str[i]; // Copy non-vowel characters
        }
    }
    result[j] = '\0'; // Null-terminate the result string
    cout << "String after removing vowels: " << result << endl;

    return 0;
}
// (d) Write a program to sort the strings in alphabetical order.
#include <iostream>
#include <cstring>
using namespace std;
int main() {
    int n;
    cout << "Enter number of strings: ";
    cin >> n;
    cin.ignore(); // To ignore the newline character after reading n

    char strings[n][100];
    cout << "Enter strings:" << endl;
    for (int i = 0; i < n; i++) {
        cin.getline(strings[i], 100);
    }

    // Sort the strings using bubble sort
    for (int i = 0; i < n - 1; i++) {
        for (int j = 0; j < n - i - 1; j++) {
            if (strcmp(strings[j], strings[j + 1]) > 0) {
                char temp[100];
                strcpy(temp, strings[j]);
                strcpy(strings[j], strings[j + 1]);
                strcpy(strings[j + 1], temp);
            }
        }
    }

    cout << "Strings in alphabetical order:" << endl;
    for (int i = 0; i < n; i++) {
        cout << strings[i] << endl;
    }

    return 0;
}

// (e) Write a program to convert a character from uppercase to lowercase
#include <iostream>
using namespace std;    
int main() {
    char ch;
    cout << "Enter a character: ";
    cin >> ch;

    if (ch >= 'A' && ch <= 'Z') {
        ch = ch + ('a' - 'A'); // Convert to lowercase
    }

    cout << "Lowercase character: " << ch << endl;
    return 0;
}


//Ques5:-
// Space required to store any two-dimensional array is 𝑛𝑢𝑚𝑏𝑒𝑟 𝑜ƒ 𝑟𝑜𝑤𝑠 × 𝑛𝑢𝑚𝑏𝑒𝑟 𝑜ƒ
// 𝑐𝑜𝑙𝑢𝑚𝑛𝑠. Assuming array is used to store elements of the following matrices, implement an efficient way that reduces the space requirement.
// (a) Diagonal Matrix.

#include <iostream>
using namespace std;
int main() {
    int n = 4; // size of the matrix
    int A[4] = {1, 2, 3, 4}; // diagonal elements
    cout << "Diagonal Matrix:" << endl;
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            if (i == j) cout << A[i] << " ";
            else cout << "0 ";
        }
        cout << endl;
    }
    return 0;
}


// (b) Tri-diagonal Matrix.

#include <iostream>
using namespace std;        
int main() {
    int n = 4; // size of the matrix
    int A[4] = {1, 2, 3, 4}; // diagonal elements
    cout << "Tri-diagonal Matrix:" << endl;
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            if (i == j || i == j - 1 || i == j + 1) cout << A[i] << " ";
            else cout << "0 ";
        }
        cout << endl;
    }
    return 0;
}

// (c) Lower triangular Matrix.

#include <iostream>
using namespace std;
int main() {
    int n = 4; // size of the matrix
    int A[4] = {1, 2, 3, 4}; // lower triangular elements
    cout << "Lower Triangular Matrix:" << endl;
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            if (i >= j) cout << A[i] << " ";
            else cout << "0 ";
        }
        cout << endl;
    }
    return 0;
}
// (d) Upper triangular Matrix.

#include <iostream>
using namespace std;
int main() {
    int n = 4; // size of the matrix
    int A[4] = {1, 2, 3, 4}; // upper triangular elements
    cout << "Upper Triangular Matrix:" << endl;
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            if (i <= j) cout << A[j] << " ";
            else cout << "0 ";
        }
        cout << endl;
    }
    return 0;
}
// (e) Symmetric Matrix

#include <iostream>
using namespace std;    
int main() {
    int n = 4; // size of the matrix
    int A[4][4] = {{1, 2, 3, 4}, {2, 5, 6, 7}, {3, 6, 8, 9}, {4, 7, 9, 10}}; // symmetric elements
    cout << "Symmetric Matrix:" << endl;
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            cout << A[i][j] << " ";
        }
        cout << endl;
    }
    return 0;
}
//Ques6:-





//Ques7:-
// Let A[1 …. n] be an array of n real numbers. A pair (A[i], A[j ]) is said to be an inversion if these numbers are out of order,
//  i.e., i < j but A[i]>A[j ]. Write a program to count the number of inversions in an array

#include <iostream>
using namespace std;
int countInversions(int arr[], int n) {
    int count = 0;
    for (int i = 0; i < n - 1; i++) {
        for (int j = i + 1; j < n; j++) {
            if (arr[i] > arr[j]) {
                count++;
            }
        }
    }
    return count;
}
int main() {
    int arr[] = {3, 1, 2, 5, 4};
    int n = sizeof(arr) / sizeof(arr[0]);
    cout << "Number of inversions: " << countInversions(arr, n) << endl;
    return 0;
}

//Ques8:-
// Write a program to count the total number of distinct elements in an array of length n.
#include <iostream>
#include <algorithm>
using namespace std;

int main() {
    int n;
    cout << "Enter size of array: ";
    cin >> n;
    int arr[n];

    cout << "Enter elements: ";
    for(int i=0;i<n;i++) cin >> arr[i];

    sort(arr, arr+n);

    int distinct = 1; // first element is always distinct
    for(int i=1;i<n;i++) {
        if(arr[i] != arr[i-1]) distinct++;
    }

    cout << "Total distinct elements = " << distinct << endl;
    return 0;
}
